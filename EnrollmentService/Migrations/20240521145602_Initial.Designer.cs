// <auto-generated />
using System;
using EnrollmentService.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnrollmentService.Migrations
{
    [DbContext(typeof(EnrollmentDatabaseContext))]
    [Migration("20240521145602_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnrollmentService.Domain.Entity.AdmissionProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EducationForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("integer");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Citizenship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Document.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Document");

                    b.HasDiscriminator<string>("DocumentType").HasValue("Document");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Enrollment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<int>("EnrollmentStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.EnrollmentPrograms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AdmissionProgramId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EnrollmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("EnrollmentPriority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionProgramId");

                    b.HasIndex("EnrollmentId");

                    b.ToTable("EnrollmentPrograms");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Stuff.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Document.EducationDocument", b =>
                {
                    b.HasBaseType("EnrollmentService.Domain.Entity.Document.Document");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("educationDocument");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Document.Passport", b =>
                {
                    b.HasBaseType("EnrollmentService.Domain.Entity.Document.Document");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SeriesAndNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("passport");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Document.Document", b =>
                {
                    b.HasOne("EnrollmentService.Domain.Entity.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Enrollment", b =>
                {
                    b.HasOne("EnrollmentService.Domain.Entity.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrollmentService.Domain.Entity.Stuff.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Applicant");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.EnrollmentPrograms", b =>
                {
                    b.HasOne("EnrollmentService.Domain.Entity.AdmissionProgram", "AdmissionProgram")
                        .WithMany()
                        .HasForeignKey("AdmissionProgramId");

                    b.HasOne("EnrollmentService.Domain.Entity.Enrollment", null)
                        .WithMany("EnrollmentPrograms")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmissionProgram");
                });

            modelBuilder.Entity("EnrollmentService.Domain.Entity.Enrollment", b =>
                {
                    b.Navigation("EnrollmentPrograms");
                });
#pragma warning restore 612, 618
        }
    }
}
